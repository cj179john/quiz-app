{"version":3,"sources":["components/Question.js","components/Activities/AllQuestions/actions.js","components/Activities/actions.js","components/Activities/AllQuestions/Result.js","components/Activities/AllQuestions/AllQuestions.js","components/Home.js","components/Activities/AllRounds/actions.js","services/cache-service.js","components/Activities/AllRounds/Result.js","components/Activities/AllRounds/AllRounds.js","components/Content.js","routes.js","config.js","App.js","serviceWorker.js","middlewares/axios.js","middlewares/axios-response-cb.js","components/Activities/reducer.js","components/Activities/AllQuestions/reducer.js","components/Activities/AllRounds/reducer.js","reducer.js","store.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","questionBox","padding","spacing","question","border","answer","option","textAlign","Question","props","onAnswer","currentQuestion","activity","round","waitForNextRound","moveToNextRound","classes","header","name","title","Grid","container","className","item","xs","Button","onClick","Typography","variant","order","content","GET_QUESTIONS_SUCCESS","isGetQuestionsSuccess","action","type","GET_ACTIVITIES_SUCCESS","isGetActivitiesSuccess","root","width","maxWidth","margin","Result","questions","List","component","aria-label","ListItem","ListItemText","primary","Divider","light","Object","keys","map","id","button","key","divider","isCorrect","homeIcon","marginLeft","connect","state","questionsOnly","byId","questionIds","allIds","activities","dispatch","match","params","useState","setCurrentQuestion","currentId","setCurrentId","useEffect","payload","client","request","url","length","Link","to","breakpoints","up","direction","justify","alignItems","color","1","2","values","GET_ROUNDS_SUCCESS","GET_ROUNDS_QUESTIONS_COUNT_SUCCESS","GET_ROUNDS_QUESTIONS_SUCCESS","isGetRoundsSuccess","isGetRoundQuestionsSuccess","isGetRoundQuestionsCountSuccess","CacheService","this","storage","window","sessionStorage","itemName","data","updated","existing","getItem","JSON","parse","push","setItem","stringify","initialValue","cacheService","cacheName","cachedQuestions","indexBy","x","resetItem","appRoutes","Home","path","AllQuestions","withRounds","byOrder","allOrders","questionCount","count","rounds","roundByOrder","roundIds","roundOrders","currentRound","setCurrentRound","currentRoundOrder","setCurrentRoundOrder","currentQuestionOrder","setCurrentQuestionOrder","setWaitForNextRound","showResult","setShowResult","clearCache","activityId","getQuestionCount","roundId","BackToHome","addItem","nextId","nextRoundOrder","route","index","exact","Content","api","process","REACT_APP_API_URL","basename","contentGrid","flexGrow","display","userSelect","overflowX","position","top","left","transform","App","config","Card","Boolean","location","hostname","clients","axios","create","baseURL","responseType","axiosMiddleware","multiClientMiddleware","hasPreviousActionSuccessCallback","isSuccessAction","indexOf","initialState","combineReducers","indexById","getId","getOrder","indexByOrder","reducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","compose","store","createStore","applyMiddleware","next","meta","previousAction","onSuccess","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6ce40e4.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Typography, Button } from '@material-ui/core';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    questionBox: {\n      padding: theme.spacing(8)\n    },\n    question: {\n      border: 1\n    },\n    answer: {\n      padding: theme.spacing(8)\n    },\n    option: {\n      textAlign: 'center'\n    }\n  })\n);\n\nfunction Question(props) {\n  const {onAnswer, currentQuestion, activity, round, waitForNextRound, moveToNextRound} = props;\n  const classes = useStyles();\n  const header = round ? `${activity.name} / ${round.title}` : activity.name;\n\n  if (waitForNextRound) {\n    return (\n      <Grid\n      container={true}\n      spacing={3}\n      className={classes.questionBox}\n    >\n      <Grid item={true} xs={12} className={classes.option}>\n        <Button onClick={moveToNextRound}>Next Round</Button>\n      </Grid>\n    </Grid>\n    );\n  }\n  return (\n    <Grid\n      container={true}\n      spacing={3}\n      className={classes.questionBox}\n    >\n      <Grid item={true} xs={12}>\n        <Typography variant=\"h6\">{header}</Typography>\n      </Grid>\n      <Grid item={true} xs={12}>\n        <Typography variant=\"h4\">Question {currentQuestion.order}</Typography>\n      </Grid>\n      <Grid item={true} xs={12} className={classes.question}>\n        <h4 className=\"question\">{currentQuestion.content}</h4>\n      </Grid>\n      <Grid item={true} xs={6} className={classes.option}>\n        <Button onClick={onAnswer}>Correct</Button>\n      </Grid>\n      <Grid item={true} xs={6} className={classes.option}>\n        <Button onClick={onAnswer}>InCorrect</Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Question;","const GET_QUESTIONS = 'QUESTIONS.GET_ALL';\nconst GET_QUESTIONS_COUNT = 'QUESTIONS.QUESTIONS.COUNT';\nconst GET_QUESTIONS_SUCCESS = `${GET_QUESTIONS}_SUCCESS`;\nconst GET_QUESTIONS_COUNT_SUCCESS = `${GET_QUESTIONS_COUNT}_SUCCESS`;\n\nexport function getQuestions(activityId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/questions`\n      }\n    },\n    type: GET_QUESTIONS\n  };\n}\n\nexport function isGetQuestionsSuccess(action) {\n  return action.type === GET_QUESTIONS_SUCCESS;\n}\n\nexport function isGetQuestionsCountSuccess(action) {\n  return action.type === GET_QUESTIONS_COUNT_SUCCESS;\n}","const GET_ACTIVITIES = 'ACTIVITIES.GET_ALL';\nconst GET_ACTIVITIES_QUESTIONS_COUNT = 'ACTIVITIES.QUESTIONS.COUNT';\nconst GET_ACTIVITIES_SUCCESS = `${GET_ACTIVITIES}_SUCCESS`;\nconst GET_ACTIVITIES_QUESTIONS_COUNT_SUCCESS = `${GET_ACTIVITIES_QUESTIONS_COUNT}_SUCCESS`;\n\nexport function getActivities() {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: '/activities'\n      }\n    },\n    type: GET_ACTIVITIES\n  };\n}\n\nexport function isGetActivitiesSuccess(action) {\n  return action.type === GET_ACTIVITIES_SUCCESS;\n}\n\nexport function isGetActivitiesQuestionsCountSuccess(action) {\n  return action.type === GET_ACTIVITIES_QUESTIONS_COUNT_SUCCESS;\n}\n","import React from 'react';\nimport { List, ListItem, ListItemText, Divider, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    margin: 'auto'\n  },\n  header: {\n    textAlign: 'center'\n  },\n}));\n\nfunction Result(props) {\n  const {activity, questions} = props;\n  const classes = useStyles();\n\n  return (\n    <List component=\"nav\" className={classes.root} aria-label=\"result-list\">\n      <ListItem>\n        <ListItemText primary={activity.name} />\n      </ListItem>\n      <ListItem>\n        <ListItemText primary='Results' />\n      </ListItem>\n      <Divider light />\n      {\n        Object.keys(questions).map(id => {\n          const question = questions[id];\n          return (\n            <ListItem button key={id} divider={true}>\n              <ListItemText primary={`Q${question.id}`} />\n              <ListItemText primary={question.isCorrect ? 'correct' : 'false'} />\n            </ListItem>\n          );\n        })\n      }\n    </List>\n  );\n};\n\nexport default Result;\n","import React, {useEffect, useState} from 'react';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { Link } from 'react-router-dom';\nimport Question from '../../Question';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport {connect} from 'react-redux';\nimport {getQuestions} from './actions';\nimport {getActivities} from '../actions';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport Result from './Result';\n\nconst useStyles = makeStyles(theme => ({\n    homeIcon: {\n      marginLeft: '50%'\n    }\n  })\n);\n\nfunction AllQuestions(props) {\n  const {match, questions, dispatch, questionIds, activities} = props;\n\n  const classes = useStyles();\n  const id = match.params.id;\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [currentId, setCurrentId] = useState(1);\n  let activity = activities[id];\n\n  useEffect(() => {\n    dispatch(getActivities());\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    dispatch(getQuestions(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (questionIds && questionIds.length > 0) {\n      setCurrentQuestion(questions[currentId]);\n    }\n  }, [questionIds, currentId, questions]);\n\n  const onAnswer = () => {\n    if (currentId <= questionIds.length) {\n      setCurrentId(currentId + 1);\n      setCurrentQuestion(questions[currentId + 1]);\n    }\n  };\n\n  if (currentQuestion === null) {\n    return (\n      <Grid container={true}>\n        <Typography variant='h4'>Loading...</Typography>\n      </Grid>\n    )\n  }\n\n  if (currentId > questionIds.length) {\n    return (\n      <>\n        <Result questions={questions} activity={activity} />\n        <Button className={classes.homeIcon} component={Link} to=\"/\"><HomeIcon/></Button>\n      </>\n    );\n  }\n\n  return (\n    <Grid container={true}>\n      <Grid item={true} xs={12}>\n        <Question currentQuestion={currentQuestion} activity={activity} onAnswer={onAnswer} round={null}/>\n      </Grid>\n      <Grid item={true} xs={12} className={classes.homeIcon}>\n        <Button component={Link} to=\"/\"><HomeIcon/></Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.questionsOnly.byId,\n  questionIds: state.questionsOnly.allIds,\n  activities: state.activities.byId\n});\n\nconst mapDispatchToProps = (dispatch) => ({dispatch});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllQuestions);","import React, {useEffect} from 'react';\nimport {Button, Grid} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport {connect} from 'react-redux';\nimport { getActivities } from './Activities/actions';\nimport {map, values} from 'ramda';\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    questionBox: {\n      [theme.breakpoints.up('md')]: {\n        padding: theme.spacing(8),\n        maxWidth: 345,\n      }\n    },\n    question: {\n      border: 1\n    },\n    answer: {\n      padding: theme.spacing(8)\n    }\n  })\n);\n\nfunction Home(props) {\n  const {activities, dispatch} = props;\n\n  const classes = useStyles();\n  const links = (id) => ({\n    1: `/activities/${id}/questions`,\n    2: `/activities/${id}/rounds`\n  });\n\n  useEffect(() => {\n    dispatch(getActivities());\n  }, [dispatch]);\n\n  return (\n    <Grid\n    container={true}\n    direction=\"column\"\n    justify=\"center\"\n    spacing={3}\n    className={classes.questionBox}\n    alignItems=\"center\"\n  >\n    {\n      map(activity => (\n        <Grid item={true} xs={12} key={activity.id}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            component={Link}\n            to={links(activity.id)[activity.id]}\n          >\n            {activity.name}\n          </Button>\n        </Grid>\n      ), values(activities))\n    }\n  </Grid>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  activities: state.activities.byId\n});\n\nconst mapDispatchToProps = (dispatch) => ({dispatch});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","const GET_ROUNDS = 'ROUNDS.GET_ALL';\nconst GET_ROUNDS_QUESTIONS_COUNT = 'ROUNDS.QUESTIONS.COUNT';\nconst GET_ROUNDS_SUCCESS = `${GET_ROUNDS}_SUCCESS`;\nconst GET_ROUNDS_QUESTIONS_COUNT_SUCCESS = `${GET_ROUNDS_QUESTIONS_COUNT}_SUCCESS`;\nconst GET_ROUNDS_QUESTIONS = 'ROUNDS.GET_QUESTION_ALL';\nconst GET_ROUNDS_QUESTIONS_SUCCESS = `${GET_ROUNDS_QUESTIONS}_SUCCESS`;\n\nexport function getRounds(activityId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/rounds`\n      }\n    },\n    type: GET_ROUNDS\n  };\n}\n\nexport function getRoundQuestions(activityId, roundId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/rounds/${roundId}/questions`\n      }\n    },\n    type: GET_ROUNDS_QUESTIONS\n  };\n}\n\nexport function getQuestionCount(activityId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/questions/count`\n      }\n    },\n    type: GET_ROUNDS_QUESTIONS_COUNT\n  };\n}\n\nexport function isGetRoundsSuccess(action) {\n  return action.type === GET_ROUNDS_SUCCESS;\n}\nexport function isGetRoundQuestionsSuccess(action) {\n  return action.type === GET_ROUNDS_QUESTIONS_SUCCESS;\n}\nexport function isGetRoundQuestionsCountSuccess(action) {\n  return action.type === GET_ROUNDS_QUESTIONS_COUNT_SUCCESS;\n}","export default class CacheService {\n\n  constructor() {\n    this.storage = window.sessionStorage;\n  }\n\n  addItem(itemName, data) {\n    let existing = this.storage.getItem(itemName);\n    let updated;\n\n    if (!existing) {\n      updated = [data];\n    } else {\n      updated = JSON.parse(existing);\n      updated.push(data);\n    }\n\n    this.storage.setItem(itemName, JSON.stringify(updated));\n  }\n\n  getItem(itemName) {\n    const existing = this.storage.getItem(itemName);\n    return existing ? JSON.parse(existing) : [];\n  }\n\n  resetItem(itemName, initialValue = null) {\n    return this.storage.setItem(itemName, JSON.stringify(initialValue));\n  }\n}","import React from 'react';\nimport { List, ListItem, ListItemText, Divider, makeStyles } from '@material-ui/core';\nimport CacheService from '../../../services/cache-service';\nimport {indexBy} from 'ramda';\n\nconst cacheService = new CacheService();\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    margin: 'auto'\n  },\n  header: {\n    textAlign: 'center'\n  },\n}));\n\nfunction Result(props) {\n  const {activity, cacheName} = props;\n  const cachedQuestions = indexBy((x) => x.id, cacheService.getItem(cacheName));\n\n  const classes = useStyles();\n  return (\n    <List component=\"nav\" className={classes.root} aria-label=\"result-list\">\n      <ListItem>\n        <ListItemText primary={activity.name} />\n      </ListItem>\n      <ListItem>\n        <ListItemText primary='Results' />\n      </ListItem>\n      <Divider light />\n      {\n        Object.keys(cachedQuestions).map(id => {\n          const question = cachedQuestions[id];\n          return (\n            <ListItem button key={id} divider={true}>\n              <ListItemText primary={`Q${question.id}`} />\n              <ListItemText primary={question.isCorrect ? 'correct' : 'false'} />\n            </ListItem>\n          );\n        })\n      }\n    </List>\n  );\n};\n\nexport default Result;\n","import React, {useEffect, useState} from 'react';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { Link } from 'react-router-dom';\nimport Question from '../../Question';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport {connect} from 'react-redux';\nimport {getRounds, getRoundQuestions, getQuestionCount} from './actions';\nimport {getActivities} from '../actions';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport Result from './Result';\nimport CacheService from '../../../services/cache-service';\n\nconst cacheService = new CacheService();\nconst CACHE_ITEM_NAME = 'processedQuestions';\n\ncacheService.resetItem(CACHE_ITEM_NAME, []);\n\nconst useStyles = makeStyles(theme => ({\n    homeIcon: {\n      marginLeft: '50%'\n    }\n  })\n);\n\nfunction AllRounds(props) {\n  const {match, questions, dispatch, questionIds, activities, rounds, roundIds, questionCount} = props;\n\n  const classes = useStyles();\n  const id = match.params.id;\n  const [currentRound, setCurrentRound] = useState(null);\n  const [currentRoundOrder, setCurrentRoundOrder] = useState(1);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [currentQuestionOrder, setCurrentQuestionOrder] = useState(1);\n  const [waitForNextRound, setWaitForNextRound] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n\n  const moveToNextRound = () => {\n    setWaitForNextRound(false);\n    const nextRoundOrder = currentRoundOrder + 1;\n    setCurrentRoundOrder(nextRoundOrder);\n    setCurrentRound(rounds[nextRoundOrder]);\n  };\n\n  const clearCache = () => cacheService.resetItem(CACHE_ITEM_NAME, []);\n\n  let activity = activities[id];\n\n  useEffect(() => {\n    dispatch(getActivities());\n    dispatch(getRounds(id));\n    dispatch(getQuestionCount(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (roundIds && roundIds.length > 0) {\n      setCurrentRound(rounds[currentRoundOrder]);\n    }\n  }, [roundIds, rounds, currentRoundOrder]);\n\n  useEffect(() => {\n    dispatch(getRoundQuestions(id, currentRoundOrder))\n    setCurrentQuestionOrder(1);\n  }, [dispatch, id, currentRoundOrder]);\n\n  useEffect(() => {\n    if (questionIds && questionIds.length > 0) {\n      setCurrentQuestion(questions[currentQuestionOrder]);\n    }\n  }, [questionIds, currentQuestionOrder, questions]);\n\n  const onAnswer = () => {\n\n    cacheService.addItem(CACHE_ITEM_NAME, currentQuestion);\n\n    if (currentRoundOrder <= roundIds.length) {\n      if (currentQuestionOrder < questionIds.length) {\n        const nextId = currentQuestionOrder + 1;\n        setCurrentQuestionOrder(nextId);\n        setCurrentQuestion(questions[nextId]);\n\n      } else if (currentRoundOrder < roundIds.length) {\n        setWaitForNextRound(true);\n      }\n    }\n\n    const processed = cacheService.getItem(CACHE_ITEM_NAME).length;\n    if (processed === questionCount) {\n      setShowResult(true);\n    }\n  };\n\n  const BackToHome = () => (<Button onClick={clearCache} component={Link} to=\"/\"><HomeIcon/></Button>);\n\n  if (currentQuestion === null) {\n    return (\n      <Grid container={true}>\n        <Typography variant='h4'>Loading...</Typography>\n      </Grid>\n    )\n  }\n\n  if (showResult) {\n    return (\n      <>\n        <Result activity={activity} cacheName={CACHE_ITEM_NAME}/>\n        <BackToHome />\n      </>\n\n    );\n  }\n\n  return (\n    <Grid container={true}>\n      <Grid item={true} xs={12}>\n        <Question\n          currentQuestion={currentQuestion}\n          activity={activity}\n          onAnswer={onAnswer}\n          round={currentRound}\n          waitForNextRound={waitForNextRound}\n          moveToNextRound={moveToNextRound}\n        />\n      </Grid>\n      <Grid item={true} xs={12} className={classes.homeIcon}>\n        <BackToHome />\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.withRounds.byOrder,\n  questionIds: state.withRounds.allOrders,\n  questionCount: state.withRounds.count,\n  activities: state.activities.byId,\n  rounds: state.withRounds.roundByOrder,\n  roundIds: state.withRounds.roundOrders,\n});\n\nconst mapDispatchToProps = (dispatch) => ({dispatch});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllRounds);","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {routes} from '../routes';\n\nconst appRoutes = routes.map(\n  (route, index) => {\n    return (\n      <Route\n        key={index}\n        exact={true}\n        path={route.path}\n        component={route.component}\n      />\n    );\n  });;\n\nexport const Content = () => {\n  return (\n    <Switch>\n      {appRoutes}\n    </Switch>\n  );\n};","import AllQuestions from './components/Activities/AllQuestions/AllQuestions';\nimport Home from './components/Home';\nimport AllRounds from './components/Activities/AllRounds/AllRounds';\n\nexport const routes = [\n  {\n    component: Home,\n    path: '/'\n  },\n  {\n    component: AllQuestions,\n    path: '/activities/:id/questions'\n  },\n  {\n    component: AllRounds,\n    path: '/activities/:id/rounds'\n  }\n];\n","export default {\n  api: {\n    url: process.env.REACT_APP_API_URL || 'http://localhost:3009'\n  },\n  basename: process.env.PUBLIC_URL || '/'\n};\n","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport {Content} from './components/Content';\nimport { Card } from '@material-ui/core';\nimport config from './config';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n      contentGrid: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n      },\n      root: {\n        display: 'flex',\n      },\n      content: {\n        userSelect: 'none',\n        overflowX: 'hidden',\n        margin: 'auto',\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }\n    })\n);\n\nconst App = () => {\n\n  const classes = useStyles();\n\n  return (\n    <Router basename={config.basename}>\n      <div className={classes.root}>\n        <div className={classes.contentGrid}>\n          <Card\n            className={classes.content}\n          >\n            <Content/>\n          </Card>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\nimport config from '../config';\nimport { multiClientMiddleware } from 'redux-axios-middleware';\n\nconst clients = {\n  api: {\n    client: axios.create({\n      baseURL: `${config.api.url}/api`,\n      responseType: 'json'\n    })\n  },\n};\n\nexport const axiosMiddleware = multiClientMiddleware(clients);","import {path} from 'ramda';\n\nexport const axiosResponseCallback =\n  (store) =>\n    (next) =>\n      (action) => {\n        if (isSuccessAction(action) && hasPreviousActionSuccessCallback(action)) {\n          store.dispatch(action.meta.previousAction.onSuccess(action.payload.data));\n        }\n        next(action);\n      };\n\nconst hasPreviousActionSuccessCallback = (action) => !!path(['meta', 'previousAction', 'onSuccess'], action);\nconst isSuccessAction = (action) => action.type && action.type.indexOf('_SUCCESS') > -1;\n","import { combineReducers } from 'redux';\nimport {indexBy} from 'ramda';\nimport {isGetActivitiesSuccess} from './actions';\n\nconst initialState = {\n  byId: {}\n};\n\nexport const activities = combineReducers({\n  byId\n});\n\nconst indexById = indexBy((x) => x.id);\n\nfunction byId(state = initialState.byId, action) {\n  if (isGetActivitiesSuccess(action)) {\n    return indexById(action.payload.data);\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport {isGetQuestionsSuccess} from './actions';\nimport {indexBy, map} from 'ramda';\n\nconst initialState = {\n  allIds: [],\n  byId: {},\n  count: null\n};\n\nexport const questionsOnly = combineReducers({\n  allIds,\n  byId,\n  count\n});\n\nconst indexById = indexBy((x) => x.id);\nconst getId = map((x) => x.id);\n\nfunction byId(state = initialState.byId, action) {\n  if (isGetQuestionsSuccess(action)) {\n    return indexById(action.payload.data);\n  }\n  return state;\n}\n\nfunction allIds(state = initialState.allIds, action) {\n  if (isGetQuestionsSuccess(action)) {\n    return getId(action.payload.data);\n  }\n  return state;\n}\n\nfunction count(state = initialState.count, action) {\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport {isGetRoundQuestionsSuccess, isGetRoundsSuccess, isGetRoundQuestionsCountSuccess} from './actions';\nimport {indexBy, map} from 'ramda';\n\nconst initialState = {\n  allOrders: [],\n  byOrder: {},\n  count: null,\n  roundByOrder: {},\n  roundOrders: []\n};\n\nexport const withRounds = combineReducers({\n  allOrders,\n  byOrder,\n  count,\n  roundByOrder,\n  roundOrders,\n});\n\nconst indexByOrder = indexBy((x) => x.order);\nconst getOrder = map((x) => x.order);\n\nfunction roundByOrder(state = initialState.roundByOrder, action) {\n  if (isGetRoundsSuccess(action)) {\n    return indexByOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction roundOrders(state = initialState.roundOrders, action) {\n  if (isGetRoundsSuccess(action)) {\n    return getOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction byOrder(state = initialState.byOrder, action) {\n  if (isGetRoundQuestionsSuccess(action)) {\n    return indexByOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction allOrders(state = initialState.allOrders, action) {\n  if (isGetRoundQuestionsSuccess(action)) {\n    return getOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction count(state = initialState.count, action) {\n  if (isGetRoundQuestionsCountSuccess(action)) {\n    return action.payload.data.count;\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport {activities} from './components/Activities/reducer';\nimport {questionsOnly} from './components/Activities/AllQuestions/reducer';\nimport {withRounds} from './components/Activities/AllRounds/reducer';\n\nexport const reducer = combineReducers({\n  activities,\n  questionsOnly,\n  withRounds,\n});","import {applyMiddleware, compose, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport {axiosMiddleware} from './middlewares/axios';\nimport {axiosResponseCallback} from './middlewares/axios-response-cb';\nimport {reducer} from './reducer';\n\n// Redux Developer Tools Integration (requires extension to be installed\nconst composeEnhancers =\n  typeof window === 'object' &&\n  // @ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      trace: true\n    }) : compose;\n\n/*\n * The order here is important\n * The Axios middleware sends its success/fail actions to the *next* middleware in the chain.\n * The Axios middleware must therefore come before any middleware expecting to process a success/fail action.\n */\nexport const store = createStore(\n    reducer,\n    composeEnhancers(applyMiddleware(axiosMiddleware, axiosResponseCallback, thunk))\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}