{"version":3,"sources":["components/Question.js","components/Activities/AllQuestions/actions.js","components/Activities/actions.js","components/Commons/SingleQuestion.js","components/Activities/AllQuestions/Result.js","components/Commons/BackToHome.js","components/Activities/AllQuestions/AllQuestions.js","components/Home.js","components/Activities/AllRounds/actions.js","services/CacheService.js","components/Activities/AllRounds/Result.js","components/Activities/AllRounds/AllRounds.js","components/Content.js","routes.js","config.js","App.js","serviceWorker.js","middlewares/axios.js","middlewares/axios-response-cb.js","components/Activities/reducer.js","components/Activities/AllQuestions/reducer.js","components/Activities/AllRounds/reducer.js","reducer.js","store.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","questionBox","padding","spacing","answer","option","textAlign","Question","props","onAnswer","currentQuestion","activity","round","waitForNextRound","moveToNextRound","classes","header","name","title","Grid","container","className","item","xs","Button","onClick","Typography","variant","toUpperCase","order","content","GET_QUESTIONS_SUCCESS","isGetQuestionsSuccess","action","type","GET_ACTIVITIES_SUCCESS","isGetActivitiesSuccess","center","SingleQuestion","question","ListItem","button","key","id","divider","ListItemText","primary","isCorrect","root","width","maxWidth","margin","Result","questions","List","component","aria-label","Divider","light","Object","keys","map","homeIcon","marginLeft","BackToHome","Link","to","connect","state","questionsOnly","byOrder","questionIds","allOrders","activities","byId","dispatch","match","useState","setCurrentQuestion","currentId","setCurrentId","params","useEffect","payload","client","request","url","length","marginBottom","marginTop","breakpoints","up","bodyText","border","color","1","2","values","GET_ROUNDS_SUCCESS","GET_ROUNDS_QUESTIONS_COUNT_SUCCESS","GET_ROUNDS_QUESTIONS_SUCCESS","isGetRoundsSuccess","isGetRoundQuestionsSuccess","isGetRoundQuestionsCountSuccess","CacheService","storage","window","sessionStorage","this","itemName","data","updated","existing","getItem","JSON","parse","push","setItem","stringify","initialValue","cacheService","cacheName","rounds","cachedQuestions","groupBy","x","roundId","roundOrder","resetItem","appRoutes","Home","path","AllQuestions","withRounds","questionCount","count","roundByOrder","roundIds","roundOrders","currentRound","setCurrentRound","currentRoundOrder","setCurrentRoundOrder","currentQuestionOrder","setCurrentQuestionOrder","setWaitForNextRound","showResult","setShowResult","activityId","getQuestionCount","addItem","nextId","nextRoundOrder","route","index","exact","Content","api","basename","process","contentGrid","flexGrow","display","userSelect","overflowX","position","top","left","transform","minWidth","App","config","Card","Boolean","location","hostname","clients","axios","create","baseURL","responseType","axiosMiddleware","multiClientMiddleware","hasPreviousActionSuccessCallback","isSuccessAction","indexOf","initialState","combineReducers","indexById","indexBy","getOrder","indexByOrder","reducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","compose","store","createStore","applyMiddleware","next","meta","previousAction","onSuccess","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.afa6709b.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Typography, Button } from '@material-ui/core';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    questionBox: {\n      padding: theme.spacing(8)\n    },\n    answer: {\n      padding: theme.spacing(8)\n    },\n    option: {\n      textAlign: 'center'\n    }\n  })\n);\n\nfunction Question(props) {\n  const {onAnswer, currentQuestion, activity, round, waitForNextRound, moveToNextRound} = props;\n  const classes = useStyles();\n  const header = round ? `${activity.name} / ${round.title}` : activity.name;\n\n  if (waitForNextRound) {\n    return (\n      <Grid\n        container={true}\n        spacing={8}\n        className={classes.questionBox}\n      >\n      <Grid item={true} className={classes.option} xs={12}>\n        <Button onClick={moveToNextRound}>Next Round</Button>\n      </Grid>\n    </Grid>\n    );\n  }\n  return (\n    <Grid\n      container={true}\n      spacing={8}\n      className={classes.questionBox}\n    >\n      <Grid item={true} xs={12}>\n        <Typography variant=\"h6\">{header.toUpperCase()}</Typography>\n      </Grid>\n      <Grid item={true} xs={12}>\n        <Typography variant=\"h5\">Question {currentQuestion.order}.</Typography>\n      </Grid>\n      <Grid item={true} xs={12}>\n        <Typography variant=\"h5\" className=\"question\">{currentQuestion.content}.</Typography>\n      </Grid>\n      <Grid item={true} xs={6} className={classes.option}>\n        <Button onClick={onAnswer}>Correct</Button>\n      </Grid>\n      <Grid item={true} xs={6} className={classes.option}>\n        <Button onClick={onAnswer}>InCorrect</Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Question;","const GET_QUESTIONS = 'QUESTIONS.GET_ALL';\nconst GET_QUESTIONS_COUNT = 'QUESTIONS.QUESTIONS.COUNT';\nconst GET_QUESTIONS_SUCCESS = `${GET_QUESTIONS}_SUCCESS`;\nconst GET_QUESTIONS_COUNT_SUCCESS = `${GET_QUESTIONS_COUNT}_SUCCESS`;\n\nexport function getQuestions(activityId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/questions`\n      }\n    },\n    type: GET_QUESTIONS\n  };\n}\n\nexport function isGetQuestionsSuccess(action) {\n  return action.type === GET_QUESTIONS_SUCCESS;\n}\n\nexport function isGetQuestionsCountSuccess(action) {\n  return action.type === GET_QUESTIONS_COUNT_SUCCESS;\n}","const GET_ACTIVITIES = 'ACTIVITIES.GET_ALL';\nconst GET_ACTIVITIES_QUESTIONS_COUNT = 'ACTIVITIES.QUESTIONS.COUNT';\nconst GET_ACTIVITIES_SUCCESS = `${GET_ACTIVITIES}_SUCCESS`;\nconst GET_ACTIVITIES_QUESTIONS_COUNT_SUCCESS = `${GET_ACTIVITIES_QUESTIONS_COUNT}_SUCCESS`;\n\nexport function getActivities() {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: '/activities'\n      }\n    },\n    type: GET_ACTIVITIES\n  };\n}\n\nexport function isGetActivitiesSuccess(action) {\n  return action.type === GET_ACTIVITIES_SUCCESS;\n}\n\nexport function isGetActivitiesQuestionsCountSuccess(action) {\n  return action.type === GET_ACTIVITIES_QUESTIONS_COUNT_SUCCESS;\n}\n","import React from 'react';\nimport { ListItem, ListItemText, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  center: {\n    textAlign: 'center'\n  },\n}));\n\nexport const SingleQuestion = (props) => {\n  const {question} = props;\n\n  const classes = useStyles();\n\n  return (\n    <ListItem button key={question.id} divider={true} className={classes.center}>\n    <ListItemText primary={`Q${question.id}`} />\n    <ListItemText primary={question.isCorrect ? 'correct' : 'false'} />\n  </ListItem>\n  );\n};\n\n","import React from 'react';\nimport { List, ListItem, ListItemText, Divider, makeStyles, Typography } from '@material-ui/core';\nimport {SingleQuestion} from '../../Commons/SingleQuestion';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    margin: 'auto'\n  },\n  center: {\n    textAlign: 'center'\n  },\n}));\n\nfunction Result(props) {\n  const {activity, questions} = props;\n\n  const classes = useStyles();\n  return (\n    <List component=\"nav\" className={classes.root} aria-label=\"result-list\">\n      <ListItem className={classes.center}>\n          <ListItemText><Typography variant=\"h5\">{activity.name}</Typography></ListItemText>\n      </ListItem>\n      <ListItem className={classes.center}>\n        <ListItemText><Typography variant=\"h5\">Results</Typography></ListItemText>\n      </ListItem>\n      <Divider light />\n      {\n        Object.keys(questions).map(id => {\n          const question = questions[id];\n          return (\n            <SingleQuestion question={question} />\n          );\n        })\n      }\n    </List>\n  );\n};\n\nexport default Result;","import React from 'react';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    homeIcon: {\n      marginLeft: '45%',\n    }\n  })\n);\n\nconst BackToHome = (props) => {\n  const {onClick} = props;\n  const classes = useStyles();\n\n  return (\n    <Button onClick={onClick} className={classes.homeIcon} component={Link} to='/'>\n      <HomeIcon/>\n    </Button>\n  );\n};\n\nexport default BackToHome;","import React, {useEffect, useState} from 'react';\nimport Question from '../../Question';\nimport Grid from '@material-ui/core/Grid';\nimport {connect} from 'react-redux';\nimport {getQuestions} from './actions';\nimport {getActivities} from '../actions';\nimport { Typography } from '@material-ui/core';\nimport Result from './Result';\nimport BackToHome from '../../Commons/BackToHome';\n\nfunction AllQuestions(props) {\n  const {match, questions, dispatch, questionIds, activities} = props;\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [currentId, setCurrentId] = useState(1);\n\n  const id = match.params.id;\n  let activity = activities[id];\n\n  useEffect(() => {\n    dispatch(getActivities());\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    dispatch(getQuestions(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (questionIds && questionIds.length > 0) {\n      setCurrentQuestion(questions[currentId]);\n    }\n  }, [questionIds, currentId, questions]);\n\n  const onAnswer = () => {\n    if (currentId <= questionIds.length) {\n      setCurrentId(currentId + 1);\n      setCurrentQuestion(questions[currentId + 1]);\n    }\n  };\n\n  if (currentQuestion === null) {\n    return (\n      <Grid container={true}>\n        <Typography variant='h4'>Loading...</Typography>\n      </Grid>\n    )\n  }\n\n  if (currentId > questionIds.length) {\n    return (\n      <>\n        <Result questions={questions} activity={activity} />\n        <BackToHome />\n      </>\n    );\n  }\n\n  return (\n    <Grid container={true}>\n      <Grid item={true}>\n        <Question currentQuestion={currentQuestion} activity={activity} onAnswer={onAnswer} round={null}/>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.questionsOnly.byOrder,\n  questionIds: state.questionsOnly.allOrders,\n  activities: state.activities.byId,\n});\n\nconst mapDispatchToProps = (dispatch) => ({dispatch});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllQuestions);","import React, {useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport {connect} from 'react-redux';\nimport { getActivities } from './Activities/actions';\nimport {map, values} from 'ramda';\nimport { List, ListItem, ListItemText, Divider, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    header: {\n      marginBottom: theme.spacing(5),\n      marginTop: theme.spacing(5),\n      marginLeft: theme.spacing(10),\n      [theme.breakpoints.up('md')]: {\n        marginLeft: theme.spacing(23),\n      }\n    },\n    bodyText: {\n      marginLeft: theme.spacing(9),\n      [theme.breakpoints.up('md')]: {\n        marginLeft: theme.spacing(23),\n      }\n    },\n    questionBox: {\n      [theme.breakpoints.up('md')]: {\n        padding: theme.spacing(8),\n        maxWidth: 345,\n      }\n    },\n    question: {\n      border: 1\n    },\n    answer: {\n      padding: theme.spacing(8)\n    }\n  })\n);\n\nexport function Home(props) {\n  const {activities, dispatch} = props;\n\n  const classes = useStyles();\n  const links = (id) => ({\n    1: `/activities/${id}/questions`,\n    2: `/activities/${id}/rounds`\n  });\n\n  useEffect(() => {\n    dispatch(getActivities());\n  }, [dispatch]);\n\n  return (\n    <List component=\"nav\" className={classes.root} aria-label=\"result-list\">\n      <ListItem className={classes.header}>\n        <Typography variant=\"h4\" > Quiz </Typography>\n      </ListItem>\n      <Divider light />\n      {\n        map(activity => (\n          <ListItem\n            button\n            divider={true}\n            variant=\"contained\"\n            color=\"primary\"\n            component={Link}\n            to={links(activity.id)[activity.id]}\n          >\n            <ListItemText className={classes.bodyText} primary={activity.name} />\n          </ListItem>\n        ), values(activities))\n      }\n    </List>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  activities: state.activities.byId\n});\n\nconst mapDispatchToProps = (dispatch) => ({dispatch});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","const GET_ROUNDS = 'ROUNDS.GET_ALL';\nconst GET_ROUNDS_QUESTIONS_COUNT = 'ROUNDS.QUESTIONS.COUNT';\nconst GET_ROUNDS_SUCCESS = `${GET_ROUNDS}_SUCCESS`;\nconst GET_ROUNDS_QUESTIONS_COUNT_SUCCESS = `${GET_ROUNDS_QUESTIONS_COUNT}_SUCCESS`;\nconst GET_ROUNDS_QUESTIONS = 'ROUNDS.GET_QUESTION_ALL';\nconst GET_ROUNDS_QUESTIONS_SUCCESS = `${GET_ROUNDS_QUESTIONS}_SUCCESS`;\n\nexport function getRounds(activityId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/rounds`\n      }\n    },\n    type: GET_ROUNDS\n  };\n}\n\nexport function getRoundQuestions(activityId, roundId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/rounds/${roundId}/questions`\n      }\n    },\n    type: GET_ROUNDS_QUESTIONS\n  };\n}\n\nexport function getQuestionCount(activityId) {\n  return {\n    payload: {\n      client: 'api',\n      request: {\n        url: `/activities/${activityId}/questions/count`\n      }\n    },\n    type: GET_ROUNDS_QUESTIONS_COUNT\n  };\n}\n\nexport function isGetRoundsSuccess(action) {\n  return action.type === GET_ROUNDS_SUCCESS;\n}\nexport function isGetRoundQuestionsSuccess(action) {\n  return action.type === GET_ROUNDS_QUESTIONS_SUCCESS;\n}\nexport function isGetRoundQuestionsCountSuccess(action) {\n  return action.type === GET_ROUNDS_QUESTIONS_COUNT_SUCCESS;\n}","export default class CacheService {\n\n  constructor(storage = window.sessionStorage) {\n    this.storage = storage;\n  }\n\n  addItem(itemName, data) {\n    let existing = this.storage.getItem(itemName);\n    let updated;\n\n    if (!existing) {\n      updated = [data];\n    } else {\n      updated = JSON.parse(existing);\n      updated.push(data);\n    }\n\n    this.storage.setItem(itemName, JSON.stringify(updated));\n  }\n\n  getItem(itemName) {\n    const existing = this.storage.getItem(itemName);\n    return existing ? JSON.parse(existing) : [];\n  }\n\n  resetItem(itemName, initialValue = null) {\n    return this.storage.setItem(itemName, JSON.stringify(initialValue));\n  }\n}","import React from 'react';\nimport CacheService from '../../../services/CacheService';\nimport {groupBy, map} from 'ramda';\nimport { List, ListItem, ListItemText, Divider, makeStyles, Typography } from '@material-ui/core';\nimport {SingleQuestion} from '../../Commons/SingleQuestion';\n\nconst cacheService = new CacheService();\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    margin: 'auto'\n  },\n  center: {\n    textAlign: 'center'\n  },\n}));\n\nfunction Result(props) {\n  const {activity, cacheName, rounds} = props;\n  const classes = useStyles();\n  const cachedQuestions = groupBy((x) => x.roundId, cacheService.getItem(cacheName));\n\n  return (\n    <List component=\"nav\" className={classes.root} aria-label=\"result-list\">\n      <ListItem className={classes.center}>\n          <ListItemText><Typography variant=\"h5\">{activity.name}</Typography></ListItemText>\n      </ListItem>\n      <ListItem className={classes.center}>\n        <ListItemText><Typography variant=\"h5\">Results</Typography></ListItemText>\n      </ListItem>\n      <Divider light />\n      {\n        Object.keys(cachedQuestions).map(roundOrder => {\n          const questions = cachedQuestions[roundOrder];\n          return (\n            <>\n              <ListItem className={classes.center} key={roundOrder}>\n                <ListItemText><Typography variant=\"h6\">{rounds[roundOrder].title}</Typography></ListItemText>\n              </ListItem>\n              {\n                (map(question => {\n                  return (\n                    <SingleQuestion question={question} />\n                  )\n                }, questions))\n              }\n            </>\n          )\n        })\n      }\n    </List>\n  );\n};\n\nexport default Result;\n","import React, {useEffect, useState} from 'react';\nimport Question from '../../Question';\nimport Grid from '@material-ui/core/Grid';\nimport {connect} from 'react-redux';\nimport {getRounds, getRoundQuestions, getQuestionCount} from './actions';\nimport {getActivities} from '../actions';\nimport {Typography} from '@material-ui/core';\nimport Result from './Result';\nimport CacheService from '../../../services/CacheService';\nimport BackToHome from '../../Commons/BackToHome';\n\nconst cacheService = new CacheService();\nconst CACHE_ITEM_NAME = 'processedQuestions';\n\ncacheService.resetItem(CACHE_ITEM_NAME, []);\n\nfunction AllRounds(props) {\n  const {match, questions, dispatch, questionIds, activities, rounds, roundIds, questionCount} = props;\n  const [currentRound, setCurrentRound] = useState(null);\n  const [currentRoundOrder, setCurrentRoundOrder] = useState(1);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [currentQuestionOrder, setCurrentQuestionOrder] = useState(1);\n  const [waitForNextRound, setWaitForNextRound] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n\n  const id = match.params.id;\n\n  const moveToNextRound = () => {\n    setWaitForNextRound(false);\n    const nextRoundOrder = currentRoundOrder + 1;\n    setCurrentRoundOrder(nextRoundOrder);\n    setCurrentRound(rounds[nextRoundOrder]);\n  };\n\n  const clearCache = () => cacheService.resetItem(CACHE_ITEM_NAME, []);\n\n  let activity = activities[id];\n\n  useEffect(() => {\n    dispatch(getActivities());\n    dispatch(getRounds(id));\n    dispatch(getQuestionCount(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (roundIds && roundIds.length > 0) {\n      setCurrentRound(rounds[currentRoundOrder]);\n    }\n  }, [roundIds, rounds, currentRoundOrder]);\n\n  useEffect(() => {\n    dispatch(getRoundQuestions(id, currentRoundOrder))\n    setCurrentQuestionOrder(1);\n  }, [dispatch, id, currentRoundOrder]);\n\n  useEffect(() => {\n    if (questionIds && questionIds.length > 0) {\n      setCurrentQuestion(questions[currentQuestionOrder]);\n    }\n  }, [questionIds, currentQuestionOrder, questions]);\n\n  const onAnswer = () => {\n\n    cacheService.addItem(CACHE_ITEM_NAME, currentQuestion);\n\n    if (currentRoundOrder <= roundIds.length) {\n      if (currentQuestionOrder < questionIds.length) {\n        const nextId = currentQuestionOrder + 1;\n        setCurrentQuestionOrder(nextId);\n        setCurrentQuestion(questions[nextId]);\n\n      } else if (currentRoundOrder < roundIds.length) {\n        setWaitForNextRound(true);\n      }\n    }\n\n    const processed = cacheService.getItem(CACHE_ITEM_NAME).length;\n    if (processed === questionCount) {\n      setShowResult(true);\n    }\n  };\n\n  if (currentQuestion === null) {\n    return (\n      <Grid container={true}>\n        <Typography variant='h4'>Loading...</Typography>\n      </Grid>\n    )\n  }\n\n  if (showResult) {\n    return (\n      <>\n        <Result activity={activity} cacheName={CACHE_ITEM_NAME} rounds={rounds}/>\n        <BackToHome onClick={clearCache} />\n      </>\n\n    );\n  }\n\n  return (\n    <Grid container={true}>\n      <Grid item={true} xs={12}>\n        <Question\n          currentQuestion={currentQuestion}\n          activity={activity}\n          onAnswer={onAnswer}\n          round={currentRound}\n          waitForNextRound={waitForNextRound}\n          moveToNextRound={moveToNextRound}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.withRounds.byOrder,\n  questionIds: state.withRounds.allOrders,\n  questionCount: state.withRounds.count,\n  activities: state.activities.byId,\n  rounds: state.withRounds.roundByOrder,\n  roundIds: state.withRounds.roundOrders,\n});\n\nconst mapDispatchToProps = (dispatch) => ({dispatch});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllRounds);","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {routes} from '../routes';\n\nconst appRoutes = routes.map(\n  (route, index) => {\n    return (\n      <Route\n        key={index}\n        exact={true}\n        path={route.path}\n        component={route.component}\n      />\n    );\n  });;\n\nexport const Content = () => {\n  return (\n    <Switch>\n      {appRoutes}\n    </Switch>\n  );\n};","import AllQuestions from './components/Activities/AllQuestions/AllQuestions';\nimport Home from './components/Home';\nimport AllRounds from './components/Activities/AllRounds/AllRounds';\n\nexport const routes = [\n  {\n    component: Home,\n    path: '/'\n  },\n  {\n    component: AllQuestions,\n    path: '/activities/:id/questions'\n  },\n  {\n    component: AllRounds,\n    path: '/activities/:id/rounds'\n  }\n];\n","export default {\n  api: {\n    url: 'https://desolate-retreat-43643.herokuapp.com'\n  },\n  basename: process.env.PUBLIC_URL || '/'\n};\n","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport {Content} from './components/Content';\nimport { Card } from '@material-ui/core';\nimport config from './config';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n      contentGrid: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n      },\n      root: {\n        display: 'flex'\n      },\n      content: {\n        [theme.breakpoints.up('md')]: {\n          userSelect: 'none',\n          overflowX: 'hidden',\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          minWidth: \"30%\"\n        }\n      }\n    })\n);\n\nconst App = () => {\n\n  const classes = useStyles();\n\n  return (\n    <Router basename={config.basename}>\n      <div className={classes.root}>\n        <div className={classes.contentGrid}>\n          <Card className={classes.content}>\n            <Content/>\n          </Card>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\nimport config from '../config';\nimport { multiClientMiddleware } from 'redux-axios-middleware';\n\nconst clients = {\n  api: {\n    client: axios.create({\n      baseURL: `${config.api.url}/api`,\n      responseType: 'json'\n    })\n  },\n};\n\nexport const axiosMiddleware = multiClientMiddleware(clients);","import {path} from 'ramda';\n\nexport const axiosResponseCallback =\n  (store) =>\n    (next) =>\n      (action) => {\n        if (isSuccessAction(action) && hasPreviousActionSuccessCallback(action)) {\n          store.dispatch(action.meta.previousAction.onSuccess(action.payload.data));\n        }\n        next(action);\n      };\n\nconst hasPreviousActionSuccessCallback = (action) => !!path(['meta', 'previousAction', 'onSuccess'], action);\nconst isSuccessAction = (action) => action.type && action.type.indexOf('_SUCCESS') > -1;\n","import { combineReducers } from 'redux';\nimport {indexBy} from 'ramda';\nimport {isGetActivitiesSuccess} from './actions';\n\nconst initialState = {\n  byId: {}\n};\n\nexport const activities = combineReducers({\n  byId\n});\n\nconst indexById = indexBy((x) => x.id);\n\nfunction byId(state = initialState.byId, action) {\n  if (isGetActivitiesSuccess(action)) {\n    return indexById(action.payload.data);\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport {isGetQuestionsSuccess} from './actions';\nimport {indexBy, map} from 'ramda';\n\nconst initialState = {\n  allOrders: [],\n  byOrder: {},\n  count: null\n};\n\nexport const questionsOnly = combineReducers({\n  allOrders,\n  byOrder,\n  count\n});\n\nconst indexByOrder = indexBy((x) => x.order);\nconst getOrder = map((x) => x.order);\n\nfunction byOrder(state = initialState.byOrder, action) {\n  if (isGetQuestionsSuccess(action)) {\n    return indexByOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction allOrders(state = initialState.allOrders, action) {\n  if (isGetQuestionsSuccess(action)) {\n    return getOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction count(state = initialState.count, action) {\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport {isGetRoundQuestionsSuccess, isGetRoundsSuccess, isGetRoundQuestionsCountSuccess} from './actions';\nimport {indexBy, map} from 'ramda';\n\nconst initialState = {\n  allOrders: [],\n  byOrder: {},\n  count: null,\n  roundByOrder: {},\n  roundOrders: []\n};\n\nexport const withRounds = combineReducers({\n  allOrders,\n  byOrder,\n  count,\n  roundByOrder,\n  roundOrders,\n});\n\nconst indexByOrder = indexBy((x) => x.order);\nconst getOrder = map((x) => x.order);\n\nfunction roundByOrder(state = initialState.roundByOrder, action) {\n  if (isGetRoundsSuccess(action)) {\n    return indexByOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction roundOrders(state = initialState.roundOrders, action) {\n  if (isGetRoundsSuccess(action)) {\n    return getOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction byOrder(state = initialState.byOrder, action) {\n  if (isGetRoundQuestionsSuccess(action)) {\n    return indexByOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction allOrders(state = initialState.allOrders, action) {\n  if (isGetRoundQuestionsSuccess(action)) {\n    return getOrder(action.payload.data);\n  }\n  return state;\n}\n\nfunction count(state = initialState.count, action) {\n  if (isGetRoundQuestionsCountSuccess(action)) {\n    return action.payload.data.count;\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport {activities} from './components/Activities/reducer';\nimport {questionsOnly} from './components/Activities/AllQuestions/reducer';\nimport {withRounds} from './components/Activities/AllRounds/reducer';\n\nexport const reducer = combineReducers({\n  activities,\n  questionsOnly,\n  withRounds,\n});","import {applyMiddleware, compose, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport {axiosMiddleware} from './middlewares/axios';\nimport {axiosResponseCallback} from './middlewares/axios-response-cb';\nimport {reducer} from './reducer';\n\n// Redux Developer Tools Integration (requires extension to be installed\nconst composeEnhancers =\n  typeof window === 'object' &&\n  // @ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      trace: true\n    }) : compose;\n\n/*\n * The order here is important\n * The Axios middleware sends its success/fail actions to the *next* middleware in the chain.\n * The Axios middleware must therefore come before any middleware expecting to process a success/fail action.\n */\nexport const store = createStore(\n    reducer,\n    composeEnhancers(applyMiddleware(axiosMiddleware, axiosResponseCallback, thunk))\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}