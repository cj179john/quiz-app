{"version":3,"sources":["components/Question.js","components/Home.js","components/Content.js","routes.js","components/Questions.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","questionBox","padding","spacing","question","border","answer","Question","props","classes","Grid","container","className","item","xs","Typography","variant","content","Home","appRoutes","component","path","Button","Link","to","map","route","index","key","exact","Content","contentGrid","flexGrow","root","display","userSelect","overflowX","paddingTop","paddingBottom","position","top","left","marginRight","transform","width","height","App","basename","Paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAOMA,EAAYC,aAAW,SAAAC,GAAK,OAChCC,YAAa,CACXC,YAAa,CACXC,QAASH,EAAMI,QAAQ,IAEzBC,SAAU,CACRC,OAAQ,GAEVC,OAAQ,CACNJ,QAASH,EAAMI,QAAQ,SAuCdI,MAlCf,SAAkBC,GAChB,IAAMC,EAAUZ,IAEhB,OACE,kBAACa,EAAA,EAAD,CACEC,WAAW,EACXR,QAAS,EACTS,UAAWH,EAAQR,aAEnB,kBAACS,EAAA,EAAD,CAAMG,MAAM,EAAMC,GAAI,IACpB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,4BAEF,kBAACN,EAAA,EAAD,CAAMG,MAAM,EAAMC,GAAI,IACpB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,QAEF,kBAACN,EAAA,EAAD,CAAMG,MAAM,EAAMC,GAAI,GAAIF,UAAWH,EAAQL,UAC3C,wBAAIQ,UAAU,YAAYJ,EAAMS,UAElC,kBAACP,EAAA,EAAD,CAAMC,WAAW,EAAMG,GAAI,IACzB,kBAACJ,EAAA,EAAD,CAAMG,MAAM,EAAMC,GAAI,GACpB,wCAEF,kBAACJ,EAAA,EAAD,CAAMG,MAAM,EAAMC,GAAI,GACpB,6C,QCnCKI,ICDTC,ECLgB,CACpB,CACEC,UFFJ,WACE,OACE,wBAAIR,UAAU,QAAd,gBECAS,KAAM,KAER,CACED,UCFJ,SAAmBZ,GACjB,OACE,oCACE,kBAAC,EAAD,CAAUS,QAAQ,iCAClB,kBAACK,EAAA,EAAD,CAAQF,UAAWG,IAAMC,GAAG,KAAI,kBAAC,IAAD,SDDlCH,KAAM,eDFeI,KACvB,SAACC,EAAOC,GACN,OACE,kBAAC,IAAD,CACEC,IAAKD,EACLE,OAAO,EACPR,KAAMK,EAAML,KACZD,UAAWM,EAAMN,eAKZU,EAAU,WACrB,OACE,kBAAC,IAAD,KACGX,IGhBDtB,EAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACX+B,YAAa,CACXC,SAAU,EACV9B,QAASH,EAAMI,QAAQ,IAEzB8B,KAAM,CACJC,QAAS,QAEXjB,QAAS,CACPkB,WAAY,OACZC,UAAW,SACXC,WAAYtC,EAAMI,QAAQ,GAC1BmC,cAAevC,EAAMI,QAAQ,GAC7BoC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,YAAa,OACbC,UAAW,wBACXC,MAAO,MACPC,OAAQ,YAyBDC,EApBH,WAEV,IAAMrC,EAAUZ,IAEhB,OACE,kBAAC,IAAD,CAAQkD,SAAS,QACf,yBAAKnC,UAAWH,EAAQwB,MACtB,yBAAKrB,UAAWH,EAAQsB,aACtB,kBAACiB,EAAA,EAAD,CACErC,WAAW,EACXC,UAAWH,EAAQQ,SAEnB,kBAAC,EAAD,WChCQgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87398fc0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Grid, Typography } from '@material-ui/core';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    questionBox: {\n      padding: theme.spacing(8)\n    },\n    question: {\n      border: 1\n    },\n    answer: {\n      padding: theme.spacing(8)\n    }\n  })\n);\n\nfunction Question(props) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container={true}\n      spacing={3}\n      className={classes.questionBox}\n    >\n      <Grid item={true} xs={12}>\n        <Typography variant=\"h6\">Activity Two / Round 1 </Typography>\n      </Grid>\n      <Grid item={true} xs={12}>\n        <Typography variant=\"h4\">Q1.</Typography>\n      </Grid>\n      <Grid item={true} xs={12} className={classes.question}>\n        <h4 className=\"question\">{props.content}</h4>\n      </Grid>\n      <Grid container={true} xs={12}>\n        <Grid item={true} xs={6}>\n          <h6>Correct</h6>\n        </Grid>\n        <Grid item={true} xs={6}>\n          <h6>Incorrect</h6>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Home() {\n  return (\n    <h2 className=\"Home\">Hello world</h2>\n  );\n}\n\nexport default Home;","import {Box, Grid, Paper} from '@material-ui/core';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {routes} from '../routes';\n\nconst appRoutes = routes.map(\n  (route, index) => {\n    return (\n      <Route\n        key={index}\n        exact={true}\n        path={route.path}\n        component={route.component}\n      />\n    );\n  });;\n\nexport const Content = () => {\n  return (\n    <Switch>\n      {appRoutes}\n    </Switch>\n  );\n};","import Questions from './components/Questions';\nimport Home from './components/Home';\n\nexport const routes = [\n  {\n    component: Home,\n    path: '/'\n  },\n  {\n    component: Questions,\n    path: '/questions'\n  }\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { Link } from 'react-router-dom';\nimport Question from './Question';\nimport { Button } from '@material-ui/core';\n\nfunction Questions(props) {\n  return (\n    <>\n      <Question content=\"What is your favourite food?\" />\n      <Button component={Link} to=\"/\"><HomeIcon/></Button>\n    </>\n  );\n}\n\nexport default Questions;","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Paper from '@material-ui/core/Paper';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport {Content} from './components/Content';\nimport blue from '@material-ui/core/colors/blue';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n      contentGrid: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n      },\n      root: {\n        display: 'flex',\n      },\n      content: {\n        userSelect: \"none\",\n        overflowX: \"hidden\",\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n        width: \"70%\",\n        height: \"75%\"\n      }\n    })\n);\n\nconst App = () => {\n\n  const classes = useStyles();\n\n  return (\n    <Router basename=\"/app\">\n      <div className={classes.root}>\n        <div className={classes.contentGrid}>\n          <Paper\n            container={true}\n            className={classes.content}\n          >\n            <Content/>\n          </Paper>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}